/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthLayoutRouteImport } from './routes/_authLayout'
import { Route as AppLayoutRouteImport } from './routes/_appLayout'
import { Route as AppLayoutIndexRouteImport } from './routes/_appLayout/index'
import { Route as AuthLayoutSignupRouteImport } from './routes/_authLayout/signup'
import { Route as AuthLayoutResetPasswordRouteImport } from './routes/_authLayout/reset-password'
import { Route as AuthLayoutLoginRouteImport } from './routes/_authLayout/login'
import { Route as AuthLayoutForgotPasswordRouteImport } from './routes/_authLayout/forgot-password'
import { Route as AppLayoutPlansRouteImport } from './routes/_appLayout/plans'
import { Route as AppLayoutNotesRouteImport } from './routes/_appLayout/notes'
import { Route as AppLayoutChatsRouteImport } from './routes/_appLayout/chats'
import { Route as AppLayoutNotesNoteIdRouteImport } from './routes/_appLayout/notes_.$noteId'

const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_authLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const AppLayoutRoute = AppLayoutRouteImport.update({
  id: '/_appLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const AppLayoutIndexRoute = AppLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AuthLayoutSignupRoute = AuthLayoutSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthLayoutResetPasswordRoute = AuthLayoutResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthLayoutLoginRoute = AuthLayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthLayoutForgotPasswordRoute =
  AuthLayoutForgotPasswordRouteImport.update({
    id: '/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => AuthLayoutRoute,
  } as any)
const AppLayoutPlansRoute = AppLayoutPlansRouteImport.update({
  id: '/plans',
  path: '/plans',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppLayoutNotesRoute = AppLayoutNotesRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppLayoutChatsRoute = AppLayoutChatsRouteImport.update({
  id: '/chats',
  path: '/chats',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppLayoutNotesNoteIdRoute = AppLayoutNotesNoteIdRouteImport.update({
  id: '/notes_/$noteId',
  path: '/notes/$noteId',
  getParentRoute: () => AppLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/chats': typeof AppLayoutChatsRoute
  '/notes': typeof AppLayoutNotesRoute
  '/plans': typeof AppLayoutPlansRoute
  '/forgot-password': typeof AuthLayoutForgotPasswordRoute
  '/login': typeof AuthLayoutLoginRoute
  '/reset-password': typeof AuthLayoutResetPasswordRoute
  '/signup': typeof AuthLayoutSignupRoute
  '/': typeof AppLayoutIndexRoute
  '/notes/$noteId': typeof AppLayoutNotesNoteIdRoute
}
export interface FileRoutesByTo {
  '/chats': typeof AppLayoutChatsRoute
  '/notes': typeof AppLayoutNotesRoute
  '/plans': typeof AppLayoutPlansRoute
  '/forgot-password': typeof AuthLayoutForgotPasswordRoute
  '/login': typeof AuthLayoutLoginRoute
  '/reset-password': typeof AuthLayoutResetPasswordRoute
  '/signup': typeof AuthLayoutSignupRoute
  '/': typeof AppLayoutIndexRoute
  '/notes/$noteId': typeof AppLayoutNotesNoteIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_appLayout': typeof AppLayoutRouteWithChildren
  '/_authLayout': typeof AuthLayoutRouteWithChildren
  '/_appLayout/chats': typeof AppLayoutChatsRoute
  '/_appLayout/notes': typeof AppLayoutNotesRoute
  '/_appLayout/plans': typeof AppLayoutPlansRoute
  '/_authLayout/forgot-password': typeof AuthLayoutForgotPasswordRoute
  '/_authLayout/login': typeof AuthLayoutLoginRoute
  '/_authLayout/reset-password': typeof AuthLayoutResetPasswordRoute
  '/_authLayout/signup': typeof AuthLayoutSignupRoute
  '/_appLayout/': typeof AppLayoutIndexRoute
  '/_appLayout/notes_/$noteId': typeof AppLayoutNotesNoteIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/chats'
    | '/notes'
    | '/plans'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/signup'
    | '/'
    | '/notes/$noteId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/chats'
    | '/notes'
    | '/plans'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/signup'
    | '/'
    | '/notes/$noteId'
  id:
    | '__root__'
    | '/_appLayout'
    | '/_authLayout'
    | '/_appLayout/chats'
    | '/_appLayout/notes'
    | '/_appLayout/plans'
    | '/_authLayout/forgot-password'
    | '/_authLayout/login'
    | '/_authLayout/reset-password'
    | '/_authLayout/signup'
    | '/_appLayout/'
    | '/_appLayout/notes_/$noteId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authLayout': {
      id: '/_authLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_appLayout': {
      id: '/_appLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_appLayout/': {
      id: '/_appLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppLayoutIndexRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_authLayout/signup': {
      id: '/_authLayout/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthLayoutSignupRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_authLayout/reset-password': {
      id: '/_authLayout/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof AuthLayoutResetPasswordRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_authLayout/login': {
      id: '/_authLayout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLayoutLoginRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_authLayout/forgot-password': {
      id: '/_authLayout/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthLayoutForgotPasswordRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_appLayout/plans': {
      id: '/_appLayout/plans'
      path: '/plans'
      fullPath: '/plans'
      preLoaderRoute: typeof AppLayoutPlansRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_appLayout/notes': {
      id: '/_appLayout/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof AppLayoutNotesRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_appLayout/chats': {
      id: '/_appLayout/chats'
      path: '/chats'
      fullPath: '/chats'
      preLoaderRoute: typeof AppLayoutChatsRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_appLayout/notes_/$noteId': {
      id: '/_appLayout/notes_/$noteId'
      path: '/notes/$noteId'
      fullPath: '/notes/$noteId'
      preLoaderRoute: typeof AppLayoutNotesNoteIdRouteImport
      parentRoute: typeof AppLayoutRoute
    }
  }
}

interface AppLayoutRouteChildren {
  AppLayoutChatsRoute: typeof AppLayoutChatsRoute
  AppLayoutNotesRoute: typeof AppLayoutNotesRoute
  AppLayoutPlansRoute: typeof AppLayoutPlansRoute
  AppLayoutIndexRoute: typeof AppLayoutIndexRoute
  AppLayoutNotesNoteIdRoute: typeof AppLayoutNotesNoteIdRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppLayoutChatsRoute: AppLayoutChatsRoute,
  AppLayoutNotesRoute: AppLayoutNotesRoute,
  AppLayoutPlansRoute: AppLayoutPlansRoute,
  AppLayoutIndexRoute: AppLayoutIndexRoute,
  AppLayoutNotesNoteIdRoute: AppLayoutNotesNoteIdRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

interface AuthLayoutRouteChildren {
  AuthLayoutForgotPasswordRoute: typeof AuthLayoutForgotPasswordRoute
  AuthLayoutLoginRoute: typeof AuthLayoutLoginRoute
  AuthLayoutResetPasswordRoute: typeof AuthLayoutResetPasswordRoute
  AuthLayoutSignupRoute: typeof AuthLayoutSignupRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLayoutForgotPasswordRoute: AuthLayoutForgotPasswordRoute,
  AuthLayoutLoginRoute: AuthLayoutLoginRoute,
  AuthLayoutResetPasswordRoute: AuthLayoutResetPasswordRoute,
  AuthLayoutSignupRoute: AuthLayoutSignupRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
